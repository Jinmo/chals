/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __GEN_INTERFACE_H__
#define __GEN_INTERFACE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.babydbus.MyServer */

#define TYPE_MY_SERVER (my_server_get_type ())
#define MY_SERVER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_MY_SERVER, MyServer))
#define IS_MY_SERVER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_MY_SERVER))
#define MY_SERVER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_MY_SERVER, MyServerIface))

struct _MyServer;
typedef struct _MyServer MyServer;
typedef struct _MyServerIface MyServerIface;

struct _MyServerIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_get_flag) (
    MyServer *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_message);

};

GType my_server_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *my_server_interface_info (void);
guint my_server_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void my_server_complete_get_flag (
    MyServer *object,
    GDBusMethodInvocation *invocation,
    const gchar *response);



/* D-Bus method calls: */
void my_server_call_get_flag (
    MyServer *proxy,
    const gchar *arg_message,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean my_server_call_get_flag_finish (
    MyServer *proxy,
    gchar **out_response,
    GAsyncResult *res,
    GError **error);

gboolean my_server_call_get_flag_sync (
    MyServer *proxy,
    const gchar *arg_message,
    gchar **out_response,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_MY_SERVER_PROXY (my_server_proxy_get_type ())
#define MY_SERVER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_MY_SERVER_PROXY, MyServerProxy))
#define MY_SERVER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_MY_SERVER_PROXY, MyServerProxyClass))
#define MY_SERVER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_MY_SERVER_PROXY, MyServerProxyClass))
#define IS_MY_SERVER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_MY_SERVER_PROXY))
#define IS_MY_SERVER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_MY_SERVER_PROXY))

typedef struct _MyServerProxy MyServerProxy;
typedef struct _MyServerProxyClass MyServerProxyClass;
typedef struct _MyServerProxyPrivate MyServerProxyPrivate;

struct _MyServerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  MyServerProxyPrivate *priv;
};

struct _MyServerProxyClass
{
  GDBusProxyClass parent_class;
};

GType my_server_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (MyServerProxy, g_object_unref)
#endif

void my_server_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
MyServer *my_server_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
MyServer *my_server_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void my_server_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
MyServer *my_server_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
MyServer *my_server_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_MY_SERVER_SKELETON (my_server_skeleton_get_type ())
#define MY_SERVER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_MY_SERVER_SKELETON, MyServerSkeleton))
#define MY_SERVER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_MY_SERVER_SKELETON, MyServerSkeletonClass))
#define MY_SERVER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_MY_SERVER_SKELETON, MyServerSkeletonClass))
#define IS_MY_SERVER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_MY_SERVER_SKELETON))
#define IS_MY_SERVER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_MY_SERVER_SKELETON))

typedef struct _MyServerSkeleton MyServerSkeleton;
typedef struct _MyServerSkeletonClass MyServerSkeletonClass;
typedef struct _MyServerSkeletonPrivate MyServerSkeletonPrivate;

struct _MyServerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  MyServerSkeletonPrivate *priv;
};

struct _MyServerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType my_server_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (MyServerSkeleton, g_object_unref)
#endif

MyServer *my_server_skeleton_new (void);


G_END_DECLS

#endif /* __GEN_INTERFACE_H__ */
